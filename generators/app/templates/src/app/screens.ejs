// https://github.com/react-community/react-navigation/issues/458
// once that issue is resolved, the initial loading screen is no longer needed and should be removed
//  in favour of setting the initialRoute as a prop of the navigator

<%_ if(features.drawerandroid || features.drawerios) { _%>
<%_ if(features.login) { _%>
import React, { PureComponent } from 'react';
<%_ } else { _%>
import React from 'react';
<%_ } _%>
<%_ } else if(features.login) { _%>
import { PureComponent } from 'react';
<%_ } _%>
<%_ if(features.login) { _%>
import { connect } from 'react-redux';
import PropTypes from 'prop-types';
<%_ } _%>
<%_ if (features.drawerandroid || features.drawerios) { _%>
import { Button } from 'react-native';
<%_ } _%>
import { <% if (features.login) { %>NavigationActions, <% } %><% if (features.tabs) { %>TabNavigator, <% } %>StackNavigator } from 'react-navigation';

<%_ if (features.drawerandroid || features.drawerios) { _%>
import { actionCreators as drawerActions } from '../redux/drawer/actions';
<%_ } _%>
import * as Routes from '../constants/routes';

<%_ if(features.login) { _%>
import Login from './screens/Login';
import Home from './screens/Home';
<%_ } else { _%>
import Home from './screens/Home';
<%_ } _%>

<%_ if(features.login) { _%>
// ------------------ Initial loading screen
class InitialLoadingScreen extends PureComponent {
  componentWillReceiveProps(nextProps) {
    if (!nextProps.initialLoading) {
      nextProps.dispatch(
        NavigationActions.reset({
          index: 0,
          actions: [NavigationActions.navigate({ routeName: nextProps.currentUser ? 'Home' : 'Login' })]
        })
      );
    }
  }
  render() {
    return null;
  }
}
InitialLoadingScreen.propTypes = {
  initialLoading: PropTypes.bool,
  currentUser: PropTypes.shape({
    sessionToken: PropTypes.string.isRequired
  })
};
const loadingScreenMapStateToProps = store => ({
  currentUser: store.auth.currentUser,
  initialLoading: store.auth.initialLoading
});
const InitialLoadingScreenContainer = connect(loadingScreenMapStateToProps)(InitialLoadingScreen);
// ------------------ Initial loading screen end

<%_ } _%>
export default StackNavigator({
  <%_ if (features.login) { _%>
  [Routes.InitialLoading]: { screen: InitialLoadingScreenContainer },
  [Routes.Login]: {
    screen: Login,
    navigationOptions: {
      title: 'Login'
    }
  },
  <%_ if (features.tabs) { _%>
  [Routes.Home]: {
    screen: TabNavigator({
      [Routes.Tab1]: {
        screen: Home,
        navigationOptions: { title: 'Tab 1' }
      },
      [Routes.Tab2]: {
        screen: Home,
        navigationOptions: { title: 'Tab 2' }
      }
    }),
    navigationOptions: (<%_ if (features.drawerandroid || features.drawerios) { _%>{ navigation }<%_ } _%>) => ({
      <%_ if (features.drawerandroid || features.drawerios) { _%>
      headerRight: (
        <Button onPress={() => navigation.dispatch(drawerActions.drawerToggled())} title="Drawer" />
      ),
      <%_ } _%>
      title: 'Home'
    })
  }
  <%_ } else { _%>
  [Routes.Home]: {
    screen: Home,
    navigationOptions: (<%_ if (features.drawerandroid || features.drawerios) { _%>{ navigation }<%_ } _%>) => ({
      <%_ if (features.drawerandroid || features.drawerios) { _%>
      headerRight: (
        <Button onPress={() => navigation.dispatch(drawerActions.drawerToggled())} title="Drawer" />
      ),
      <%_ } _%>
      title: 'Home'
    })
  }
  <%_ } _%>
  <%_ } else if (features.tabs) { _%>
  [Routes.Home]: {
    screen: TabNavigator({
      [Routes.Tab1]: {
        screen: Home,
        navigationOptions: { title: 'Tab 1' }
      },
      [Routes.Tab2]: {
        screen: Home,
        navigationOptions: { title: 'Tab 2' }
      }
    }),
    navigationOptions: (<%_ if (features.drawerandroid || features.drawerios) { _%>{ navigation }<%_ } _%>) => ({
      <%_ if (features.drawerandroid || features.drawerios) { _%>
      headerRight: (
        <Button onPress={() => navigation.dispatch(drawerActions.drawerToggled())} title="Drawer" />
      ),
      <%_ } _%>
      title: 'Home'
    })
  }
  <%_ } else { _%>
  [Routes.Home]: {
    screen: Home,
    navigationOptions: (<%_ if (features.drawerandroid || features.drawerios) { _%>{ navigation }<%_ } _%>) => ({
      <%_ if (features.drawerandroid || features.drawerios) { _%>
      headerRight: (
        <Button onPress={() => navigation.dispatch(drawerActions.drawerToggled())} title="Drawer" />
      ),
      <%_ } _%>
      title: 'Home'
    })
  }
  <%_ } _%>
});
