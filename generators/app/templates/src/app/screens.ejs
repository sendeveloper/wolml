// https://github.com/react-community/react-navigation/issues/458
// once that issue is resolved, the initial loading screen is no longer needed and should be removed
//  in favour of setting the initialRoute as a prop of the navigator

<%_ if(features.login) { _%>
import { PureComponent } from 'react';
import { connect } from 'react-redux';
import PropTypes from 'prop-types';
<%_ } _%>
import { <% if (features.login) { %>NavigationActions, <% } %><% if (features.tabs) { %>TabNavigator, <% } %>StackNavigator } from 'react-navigation';

import * as Routes from '../constants/routes';
import { stackNavConfig, screensNavOptions, <% if (features.tabs) { %>tabNavConfig<% } %> } from '../config/navigation';

<%_ if(features.login) { _%>
import Login from './screens/Login';
<%_ } _%>
import Home from './screens/Home';

<%_ if(features.login) { _%>
// ------------------ Initial loading screen
class InitialLoadingScreen extends PureComponent {
  componentWillReceiveProps(nextProps) {
    if (!nextProps.initialLoading) {
      nextProps.dispatch(
        NavigationActions.reset({
          index: 0,
          actions: [
            NavigationActions.navigate({ routeName: nextProps.currentUser ? Routes.Home : Routes.Login })
          ]
        })
      );
    }
  }
  render() {
    return null;
  }
}
InitialLoadingScreen.propTypes = {
  initialLoading: PropTypes.bool,
  currentUser: PropTypes.shape({
    sessionToken: PropTypes.string.isRequired
  })
};
const loadingScreenMapStateToProps = store => ({
  currentUser: store.auth.currentUser,
  initialLoading: store.auth.initialLoading
});
const InitialLoadingScreenContainer = connect(loadingScreenMapStateToProps)(InitialLoadingScreen);
// ------------------ Initial loading screen end

<%_ } _%>
export default StackNavigator(
  {
    <%_ if (features.login) { _%>
    [Routes.InitialLoading]: {
      screen: InitialLoadingScreenContainer,
      navigationOptions: screensNavOptions[Routes.InitialLoading]
    },
    [Routes.Login]: {
      screen: Login,
      navigationOptions: screensNavOptions[Routes.Login]
    },
    <%_ } _%>
    [Routes.Home]: {
      <%_ if (features.tabs) { _%>
      screen: TabNavigator(
        {
          [Routes.Tab1]: {
            screen: Home,
            navigationOptions: screensNavOptions[Routes.Tab1]
          },
          [Routes.Tab2]: {
            screen: Home,
            navigationOptions: screensNavOptions[Routes.Tab2]
          }
        },
        tabNavConfig
      ),
      <%_ } else { _%>
      screen: Home,
      <%_ } _%>
      navigationOptions: screensNavOptions[Routes.Home]
    }
  },
  stackNavConfig
);
