// https://github.com/react-community/react-navigation/issues/458
// once that issue is resolved, the initial loading screen is no longer needed and should be removed
//  in favour of setting the initialRoute as a prop of the navigator

<%_ if(features.drawerandroid || features.drawerios) { _%>
import React from 'react';
<%_ } _%>
<%_ if(features.login) { _%>
import { connect } from 'react-redux';
import PropTypes from 'prop-types';
<%_ } _%>
<%_ if (features.drawerandroid || features.drawerios) { _%>
import { Button } from 'react-native';
<%_ } _%>
import { <% if (features.login) { %>NavigationActions, <% } %><% if (features.tabs) { %>TabNavigator, <% } %>StackNavigator } from 'react-navigation';

<%_ if (features.drawerandroid || features.drawerios) { _%>
import { actionCreators as drawerActions } from '../redux/drawer/actions';

<%_ } _%>
<%_ if(features.login) { _%>
import Login from './screens/login';
import Home from './screens/home';
<%_ } else { _%>
import Home from './screens/home';
<%_ } _%>

<%_ if(features.login) { _%>
// ------------------ Initial loading screen
const InitialLoadingScreen = props => {
  if (!props.initialLoading) {
    props.dispatch(
      NavigationActions.reset({
        index: 0,
        actions: [NavigationActions.navigate({ routeName: props.currentUser ? 'Home' : 'Login' })]
      })
    );
  }
  return null;
};
InitialLoadingScreen.propTypes = {
  initialLoading: PropTypes.bool,
  currentUser: PropTypes.shape({
    sessionToken: PropTypes.string.isRequired
  })
};
const loadingScreenMapStateToProps = store => ({
  currentUser: store.auth.currentUser,
  initialLoading: store.auth.initialLoading
});
const InitialLoadingScreenContainer = connect(loadingScreenMapStateToProps)(InitialLoadingScreen);
// ------------------ Initial loading screen end

<%_ } _%>
export default StackNavigator({
  <%_ if (features.login) { _%>
  Login: {
    screen: Login,
    navigationOptions: {
      title: 'Login'
    }
  },
  <%_ if (features.tabs) { _%>
  Home: {
    screen: TabNavigator({
      Tab1: {
        screen: Home,
        navigationOptions: { title: 'Tab 1' }
      },
      Tab2: {
        screen: Home,
        navigationOptions: { title: 'Tab 2' }
      }
    }),
    navigationOptions: (<%_ if (features.drawerandroid || features.drawerios) { _%>{ navigation }<%_ } _%>) => ({
      <%_ if (features.drawerandroid || features.drawerios) { _%>
      headerRight: (
        <Button onPress={() => navigation.dispatch(drawerActions.drawerToggled())} title="Drawer" />
      ),
      <%_ } _%>
      title: 'Home'
    })
  },
  <%_ } else { _%>
  Home: {
    screen: Home,
    navigationOptions: (<%_ if (features.drawerandroid || features.drawerios) { _%>{ navigation }<%_ } _%>) => ({
      <%_ if (features.drawerandroid || features.drawerios) { _%>
      headerRight: (
        <Button onPress={() => navigation.dispatch(drawerActions.drawerToggled())} title="Drawer" />
      ),
      <%_ } _%>
      title: 'Home'
    })
  },
  <%_ } _%>
  InitialLoading: { screen: InitialLoadingScreenContainer }
  <%_ } else if (features.tabs) { _%>
  Home: {
    screen: TabNavigator({
      Tab1: {
        screen: Home,
        navigationOptions: { title: 'Tab 1' }
      },
      Tab2: {
        screen: Home,
        navigationOptions: { title: 'Tab 2' }
      }
    }),
    navigationOptions: (<%_ if (features.drawerandroid || features.drawerios) { _%>{ navigation }<%_ } _%>) => ({
      <%_ if (features.drawerandroid || features.drawerios) { _%>
      headerRight: (
        <Button onPress={() => navigation.dispatch(drawerActions.drawerToggled())} title="Drawer" />
      ),
      <%_ } _%>
      title: 'Home'
    })
  }
  <%_ } else { _%>
  Home: {
    screen: Home,
    navigationOptions: (<%_ if (features.drawerandroid || features.drawerios) { _%>{ navigation }<%_ } _%>) => ({
      <%_ if (features.drawerandroid || features.drawerios) { _%>
      headerRight: (
        <Button onPress={() => navigation.dispatch(drawerActions.drawerToggled())} title="Drawer" />
      ),
      <%_ } _%>
      title: 'Home'
    })
  }
  <%_ } _%>
});
